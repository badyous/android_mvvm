// Generated by Dagger (https://google.github.io/dagger).
package io.digiteam.mvvm.di.module;

import dagger.internal.Factory;
import dagger.internal.Preconditions;
import io.digiteam.mvvm.network.NetworkApiService;
import javax.inject.Provider;
import retrofit2.Retrofit;

public final class NetworkModule_ProvideNetworkApiFactory implements Factory<NetworkApiService> {
  private final NetworkModule module;

  private final Provider<Retrofit> retrofitProvider;

  public NetworkModule_ProvideNetworkApiFactory(
      NetworkModule module, Provider<Retrofit> retrofitProvider) {
    this.module = module;
    this.retrofitProvider = retrofitProvider;
  }

  @Override
  public NetworkApiService get() {
    return Preconditions.checkNotNull(
        module.provideNetworkApi(retrofitProvider.get()),
        "Cannot return null from a non-@Nullable @Provides method");
  }

  public static NetworkModule_ProvideNetworkApiFactory create(
      NetworkModule module, Provider<Retrofit> retrofitProvider) {
    return new NetworkModule_ProvideNetworkApiFactory(module, retrofitProvider);
  }

  public static NetworkApiService proxyProvideNetworkApi(
      NetworkModule instance, Retrofit retrofit) {
    return Preconditions.checkNotNull(
        instance.provideNetworkApi(retrofit),
        "Cannot return null from a non-@Nullable @Provides method");
  }
}
