// Generated by Dagger (https://google.github.io/dagger).
package io.digiteam.mvvm.di.module;

import dagger.internal.Factory;
import dagger.internal.Preconditions;
import io.digiteam.mvvm.database.NexusOneDatabase;
import io.digiteam.mvvm.database.dao.OfferDao;
import javax.inject.Provider;

public final class AppModule_ProvideOfferDaoFactory implements Factory<OfferDao> {
  private final AppModule module;

  private final Provider<NexusOneDatabase> dbProvider;

  public AppModule_ProvideOfferDaoFactory(AppModule module, Provider<NexusOneDatabase> dbProvider) {
    this.module = module;
    this.dbProvider = dbProvider;
  }

  @Override
  public OfferDao get() {
    return Preconditions.checkNotNull(
        module.provideOfferDao(dbProvider.get()),
        "Cannot return null from a non-@Nullable @Provides method");
  }

  public static AppModule_ProvideOfferDaoFactory create(
      AppModule module, Provider<NexusOneDatabase> dbProvider) {
    return new AppModule_ProvideOfferDaoFactory(module, dbProvider);
  }

  public static OfferDao proxyProvideOfferDao(AppModule instance, NexusOneDatabase db) {
    return Preconditions.checkNotNull(
        instance.provideOfferDao(db), "Cannot return null from a non-@Nullable @Provides method");
  }
}
