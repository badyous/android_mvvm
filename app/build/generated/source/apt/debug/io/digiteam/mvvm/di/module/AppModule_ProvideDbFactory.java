// Generated by Dagger (https://google.github.io/dagger).
package io.digiteam.mvvm.di.module;

import android.app.Application;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import io.digiteam.mvvm.database.NexusOneDatabase;
import javax.inject.Provider;

public final class AppModule_ProvideDbFactory implements Factory<NexusOneDatabase> {
  private final AppModule module;

  private final Provider<Application> applicationProvider;

  public AppModule_ProvideDbFactory(AppModule module, Provider<Application> applicationProvider) {
    this.module = module;
    this.applicationProvider = applicationProvider;
  }

  @Override
  public NexusOneDatabase get() {
    return Preconditions.checkNotNull(
        module.provideDb(applicationProvider.get()),
        "Cannot return null from a non-@Nullable @Provides method");
  }

  public static AppModule_ProvideDbFactory create(
      AppModule module, Provider<Application> applicationProvider) {
    return new AppModule_ProvideDbFactory(module, applicationProvider);
  }

  public static NexusOneDatabase proxyProvideDb(AppModule instance, Application application) {
    return Preconditions.checkNotNull(
        instance.provideDb(application),
        "Cannot return null from a non-@Nullable @Provides method");
  }
}
